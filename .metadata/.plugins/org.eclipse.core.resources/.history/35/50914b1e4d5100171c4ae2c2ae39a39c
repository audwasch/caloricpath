package com.caloricpath.server;

import java.util.ArrayList;

import com.caloricpath.shared.AlgorithmProperties;
import com.rpc.shared.HandleChanged;
import com.rpc.shared.RpcClass;
import com.rpc.shared.RpcPropertyArrayClass;
import com.rpc.shared.RpcPropertyClass;
import com.rpc.shared.Trace;

public class PathConfigCollectionServer
	extends RpcClass
{
	private boolean DEBUGGING=false;
	
	private PathProcessor m_Processor;
	
	public PathProcessor getProcessor() { return m_Processor; }
	
	public RpcPropertyArrayClass<PathConfigServer> List = 
		new RpcPropertyArrayClass<PathConfigServer>("List",new PathConfigServer[0],READWRITE+SAVERESTORE)
		{
			@Override
			public PathConfigServer[] CreateArray(int dimension) 
			{	
				PathConfigServer[] retn = new PathConfigServer[dimension];
				for( int n=0; n<retn.length; n++ )
					retn[n] = new PathConfigServer();
				
				return retn;
			}
		};
		
	public RpcPropertyClass<AlgorithmProperties> Algorithm = new RpcPropertyClass<AlgorithmProperties>(
		"Algorithm",
		new AlgorithmProperties(
			4,
			true,
			70.0,
			0.0,
			1.38889,
			1.0,
			177.0,
			36.8
			),
		READWRITE+SAVERESTORE
		);
	
	public PathConfigCollectionServer(String name)
	{
		super(name);
		
		m_Processor = new PathProcessor();
		List.ChangedEvent.add(List_Changed);
		Algorithm.ChangedEvent.add(Algorithm_Changed);
		ImageServiceImpl.getSat().FileName.ChangedEvent.add(FileName_Changed);
		
		//DEBUGGING=true;
		//List.DEBUGGING=true;
	}
	
	private HandleChanged<String> FileName_Changed =
			new HandleChanged<String>()
	{
		@Override
		public void Changed(String newValue) throws Exception
		{
			if(DEBUGGING)
				Trace.println("PathConfigCollectionServer::SatFile:FileName_Changed, newValue="+(newValue==null ? "null" : newValue));
			
			m_Processor.RestartAll();
		}
	};
	
	private HandleChanged<AlgorithmProperties> Algorithm_Changed =
			new HandleChanged<AlgorithmProperties>()
	{
		@Override
		public void Changed(AlgorithmProperties newValue) throws Exception
		{
			if(DEBUGGING)
				Trace.println("PathConfigCollectionServer::Algorithm_Changed()");
			
			m_Processor.RestartAll();
		}
	};
	
	private HandleChanged<PathConfigServer[]> List_Changed =
			new HandleChanged<PathConfigServer[]>()
	{
		@Override
		public void Changed(PathConfigServer[] newValue) throws Exception
		{
			if(DEBUGGING)
				Trace.println("PathConfigCollectionServer::List_Changed, n="+(newValue==null?"null":newValue.length));
		
			if(newValue != null)
			{
				for( PathConfigServer config : newValue )
				{
					if( ImageServiceImpl.getPathResults().LookupById( config.getId() ) == null )
					{
						ImageServiceImpl.getPathResults().AddSingle(
							new PathResultServer(
								config.getId(),
								config.getName(),
								new Float[0],
								new Float[0],
								0.0,
								0.0,
								config.getColor()
								)
							);
					}
					if( ImageServiceImpl.getPathStatus().LookupById( config.getId() ) == null )
					{
						ImageServiceImpl.getPathStatus().AddSingle(
							new PathStatusServer(
								config.getId(),
								"New"
								)
							);
					}
				}
				
				for( PathResultServer result : ImageServiceImpl.getPathResults().List.getValue() )
				{
					if( ImageServiceImpl.getPathConfigs().LookupById( result.getId()) == null )
					{
						ImageServiceImpl.getPathResults().RemoveById(result.getId());
						ImageServiceImpl.getPathStatus().RemoveById(result.getId());
					}	
				}
				
				for( PathStatusServer status : ImageServiceImpl.getPathStatus().List.getValue() )
				{
					if( ImageServiceImpl.getPathConfigs().LookupById( status.getId()) == null )
					{
						ImageServiceImpl.getPathStatus().RemoveById(status.getId());
						ImageServiceImpl.getPathResults().RemoveById(status.getId());
					}
				}
				
				m_Processor.OnNewData(newValue);
			}
		}
	};
	
	@Override
	public void AttachMembers()
	{
		AttachMember( List );
		AttachMember( Algorithm );
	}

	@Override
	public void DetachMembers()
	{
		DetachMember( List );
		DetachMember( Algorithm );
	}
	
	
	public PathConfigServer LookupById(int id )
	{
		
		for( int n=0; n<List.getValue().length; n++ )
			if( List.getValue()[n].getId() == id )
				return List.getValue()[n];
		
		return null;
	}
	

	public void RemoveById( int id ) throws Exception
	{
		if(DEBUGGING)
			Trace.println("PathConfigCollectionServer::RemoveById(), id="+id);
		
		ArrayList<PathConfigServer> temp = new ArrayList<PathConfigServer>();
		
		for( int n=0; n<List.getValue().length; n++ )
			if( List.getValue()[n].getId() != id )
				temp.add( List.getValue()[n] );
		
		List.setValue( temp.toArray( new PathConfigServer[temp.size()]));
	}

	public void AddSingle( PathConfigServer newValue ) throws Exception
	{
		if( newValue.getName()==null || newValue.getName().length()==0 )
			throw new Exception("[Must_Have_Name]");
		
		if(DEBUGGING)
			Trace.println("PathConfigCollectionServer::AddSingle(), name="+newValue.getName());
		
		if( LookupById(newValue.getId()) != null )
			throw new Exception( "[Id_Already_Exists]");
		
		PathConfigServer[] temp = new PathConfigServer[ List.getValue().length + 1] ;
		for( int n=0; n<List.getValue().length; n++ )
			temp[n] = List.getValue()[n];
		
		temp[ List.getValue().length ] = newValue;
		List.setValue( temp );
	}
	
	public void AnnounceChanges() 
	{
		if(DEBUGGING)
			Trace.println("PathConfigCollectionServer::AnnounceChanges()");
		
		List.AnnounceChanges();
	}
}
