package com.caloricpath.client;

import java.util.ArrayList;

import com.caloricpath.shared.AppGlobal;
import com.google.gwt.user.client.Window;
import com.rpc.shared.HandleChanged;
import com.rpc.shared.HandleCompleted;
import com.rpc.shared.RpcClass;
import com.rpc.shared.RpcMethod;
import com.rpc.shared.RpcPropertyArrayClass;
import com.rpc.shared.Trace;

public class PathResultCollectionClient
	extends RpcClass
{
	
	private final String serverFixedFileLocation = AppGlobal.SERVER_DOWNLOAD_FILE ;
	private final String mimeType = "application/gpx+xml" ;
	
	public RpcPropertyArrayClass<PathResultClient> List = 
		new RpcPropertyArrayClass<PathResultClient>("List",new PathResultClient[0],READONLY)
		{
			@Override
			public PathResultClient[] CreateArray(int dimension) 
			{	
				PathResultClient[] retn = new PathResultClient[dimension];
				for( int n=0; n<retn.length; n++ )
					retn[n] = new PathResultClient();
				
				return retn;
			}
		};
		
		public RpcMethod SaveAsGPX = new RpcMethod("SaveAsGPX" );
		

	public PathResultCollectionClient(String name)
	{
		super(name);
		
		List.ChangedEvent.add(List_Changed);
		SaveAsGPX.CompletedEvent.add(SaveAsGPX_Completed);

		//DEBUGGING=true;
		//List.DEBUGGING=true;
	}
	
	private HandleCompleted SaveAsGPX_Completed =
		new HandleCompleted()
		{
			@Override
			public void Completed(Exception e) throws Exception 
			{
				Trace.println("PathResultCollectionClient::Completed()");
				/* needs to find what row of the Result List was just requested */
				/* for SaveAsGPX, and use the Name from the Config List that associates */
				/* with the Results by the id number.  The name is used to create the destination */
				/* filename. */
				
				if( e==null )
				{
					Integer next = CaloricPath.ExportQueue.remove();
					String name = CaloricPath.getPathConfigList().LookupById(next.intValue()).getName();
					String destFilename = "Path" + name + ".gpx" ;
					
					FileTransfer.DownloadFile( 
						serverFixedFileLocation,
						destFilename,
						mimeType 
						);
				}
				else
				{
					Window.alert("Error downloading file: " + e.getMessage() );
				}
				
			}
		};
			
			
	private HandleChanged<PathResultClient[]> List_Changed =
			new HandleChanged<PathResultClient[]>()
	{
		@Override
		public void Changed(PathResultClient[] newValue) throws Exception
		{
			if(DEBUGGING)
				Trace.println("PathResultCollectionClient::List_Changed, n="+newValue.length);
		}
	};

	@Override
	public void AttachMembers()
	{
		AttachMember( List );
		AttachMember( SaveAsGPX );
	}

	@Override
	public void DetachMembers()
	{
		DetachMember( List );
		DetachMember( SaveAsGPX );
	}
	
	public PathResultClient LookupById(int id )
	{
		
		for( int n=0; n<List.getValue().length; n++ )
			if( List.getValue()[n].getId() == id )
				return List.getValue()[n];
		
		return null;
	}
	
	
	public void RemoveById( int id ) throws Exception
	{
		if(DEBUGGING)
			Trace.println("PathResultCollectionClient::RemoveById(), id="+id);
		
		ArrayList<PathResultClient> temp = new ArrayList<PathResultClient>();
		
		for( int n=0; n<List.getValue().length; n++ )
			if( List.getValue()[n].getId() != id )
				temp.add( List.getValue()[n] );
		
		List.setValue( temp.toArray( new PathResultClient[temp.size()]));
	}
	
	public void AddSingle( PathResultClient newValue ) throws Exception
	{
		if( newValue.getName()==null || newValue.getName().length()==0 )
			throw new Exception("[Must_Have_Name]");
		
		if(DEBUGGING)
			Trace.println("PathResultCollectionClient::AddSingle(), name="+newValue.getName());
		
		if( LookupById(newValue.getId()) != null )
			throw new Exception( "[Id_Already_Exists]");
		
		PathResultClient[] temp = new PathResultClient[ List.getValue().length + 1] ;
		for( int n=0; n<List.getValue().length; n++ )
			temp[n] = List.getValue()[n];
		
		temp[ List.getValue().length ] = newValue;
		List.setValue( temp );
	}

	public void AnnounceChanges() 
	{
		if(DEBUGGING)
			Trace.println("PathResultCollectionClient::AnnounceChanges()");
		
		List.AnnounceChanges();
	}
}
