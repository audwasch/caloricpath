package com.caloricpath.shared;

import com.caloricpath.shared.utility.Util;
import com.rpc.shared.Packable;
import com.rpc.shared.Trace;

public class Constraint
	extends Packable
{
	public boolean DEBUGGING=false;
	
	public enum ConstraintType
	{
		LineConstraint,
		PolygonConstraint
	};
	
	public enum DistributionType
	{
		BinaryDistribution,
		LinearDistribution,
		QuadraticDistribution
	};
	
	public static String[] ConstraintTypeStrings = {"Polyline", "Polygon"};
	public static String[] DistributionTypeStrings = {"Binary", "Linear", "Quadratic"};
	
	private ConstraintType m_type;
	private String m_name="";
	private Integer m_id;
	private DistributionType m_distribution;
	private Double m_distance;
	private Integer m_color;
	private Double m_cost;
	private Double[] m_data; /* X-Y pairs */

	public Constraint()
	{
		if(DEBUGGING)
			Trace.println("Constraint::Constraint(), default constructor");
	}
	
	public Constraint( ConstraintType type, DistributionType dist, Double distance, Double cost, Integer color, String name, Integer id, Double[] data )
	{
		if(DEBUGGING)
			Trace.println("Constraint::Constraint(), name="+name);
		
		setName(name);
		setId(id);
		setType(type);
		setColor(color);
		setDistribution(dist);
		setDistance(distance);
		setCost(cost);
		setData(data);
	}
	
	@Override
	public Byte[] Pack()
	{
		StartPacking();
		packInt( getType().ordinal() );
		packString( getName() );
		packInt( getId() );
		packInt( getColor() );
		packInt( getDistribution().ordinal() );
		packDouble( getDistance() );
		packDouble( getCost() );
		packDoubleArray( getData() );	
		return DonePacking();
	}

	@Override
	public int Unpack(Byte[] buf) throws Exception
	{
		StartUnpacking(buf);
		setType( ConstraintType.values()[ unpackInt() ] );
		setName( unpackString() );
		setId( unpackInt() );
		setColor( unpackInt() );
		setDistribution( DistributionType.values()[ unpackInt() ]);
		setDistance( unpackDouble() );
		setCost( unpackDouble() );
		setData( unpackDoubleArray() );
		return DoneUnpacking();
	}
	
	public ConstraintType getType() { return m_type; }
	public Integer getColor() { return m_color; }
	public String getName() { return m_name; }
	public DistributionType getDistribution() { return m_distribution; }
	public Double getDistance() { return m_distance; }
	public Double getCost() { return m_cost; }
	public int getPoints() { return (getData()==null)?0:(getData().length/2); }
	public Double[] getData() { return m_data; }
	public Integer getId() { return m_id; }
	
	public void setType(ConstraintType newValue)
	{
		if(DEBUGGING)
			Trace.println("Constraint::setType("+getName()+", "+getId()+"), newValue="+newValue.toString());
		
		m_type = newValue;
	}
	
	public void setColor(int newValue) 
	{ 
		if(DEBUGGING)
			Trace.println("Constraint::setColor("+getName()+", "+getId()+"), newValue="+newValue);
		
		if(newValue < Util.NUM_COLORS)
			m_color = newValue;
		else
			Trace.println("Constraint::setColor, invalid color");
	}
	
	public void setName(String newValue)
	{
		if(DEBUGGING)
			Trace.println("Constraint::setName(), newValue="+newValue);

		m_name = newValue;
	}
	
	public void setId(Integer newValue)
	{
		if(DEBUGGING)
			Trace.println("Constraint::setId(), newValue="+newValue);
		
		m_id = newValue;
	}
	
	public void setDistribution(DistributionType newValue)
	{
		if(DEBUGGING)
			Trace.println("Constraint::setDistribution("+getName()+", "+getId()+"), newValue="+newValue.toString());
		
		m_distribution = newValue;
	}
	
	public void setDistributionByInt(int newValue)
	{
		if(DEBUGGING)
			Trace.println("Constraint::setDistributionByInt("+getName()+", "+getId()+"), newValue="+newValue);
		
		if(newValue == 0)
			setDistribution(DistributionType.BinaryDistribution);
		else if(newValue == 1)
			setDistribution(DistributionType.LinearDistribution);
		else if(newValue == 2)
			setDistribution(DistributionType.QuadraticDistribution);
		else
			Trace.println("Constraint::setDistributionByInt invalid");
	}

	public void setDistance(Double newValue)
	{
		if(DEBUGGING)
			Trace.println("Constraint::setDistance("+getName()+", "+getId()+"), newValue="+newValue);
		
		m_distance = newValue;
	}
	
	public void setCost(Double newValue)
	{
		if(DEBUGGING)
			Trace.println("Constraint::setCost("+getName()+", "+getId()+"), newValue="+newValue);
		
		m_cost = newValue;
	}
	
	public void setData(Double[] newValue)
	{
		if(DEBUGGING)
			Trace.println("Constraint::setData(), points=" +  (newValue.length/2) );
		
		m_data = newValue;
	}
}
